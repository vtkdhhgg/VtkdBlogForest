<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.vtkd.ssm.blog.mapper.ArticleMapper">

    <resultMap id="BaseResultMap" type="com.vtkd.ssm.blog.entity.Article">
        <id column="article_id" property="articleId" jdbcType="INTEGER"/>
        <result column="article_user_id" property="articleUserId" jdbcType="INTEGER"/>
        <result column="article_title" property="articleTitle" jdbcType="VARCHAR"/>
        <result column="article_content" property="articleContent" jdbcType="VARCHAR"/>
        <result column="article_view_count" property="articleViewCount" jdbcType="INTEGER"/>
        <result column="article_comment_count" property="articleCommentCount" jdbcType="INTEGER"/>
        <result column="article_like_count" property="articleLikeCount" jdbcType="VARCHAR"/>
        <result column="article_is_comment" property="articleIsComment" jdbcType="INTEGER"/>
        <result column="article_status" property="articleStatus" jdbcType="INTEGER"/>
        <result column="article_order" property="articleOrder" jdbcType="INTEGER"/>
        <result column="article_update_time" property="articleUpdateTime" jdbcType="TIMESTAMP"/>
        <result column="article_create_time" property="articleCreateTime" jdbcType="TIMESTAMP"/>
        <result column="article_summary" property="articleSummary" jdbcType="VARCHAR"/>
        <result column="article_thumbnail" property="articleThumbnail" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="tb">article</sql>

    <sql id="Base_Column_List">
        article_id,article_user_id,article_title,article_content,article_view_count,article_comment_count
            ,article_like_count,article_is_comment,article_status,article_order,article_update_time,article_create_time
            ,article_summary,article_thumbnail
    </sql>

    <!--添加 文章-->
    <insert id="insertArticle" parameterType="com.vtkd.ssm.blog.entity.Article" useGeneratedKeys="true"
            keyProperty="articleId">
        insert into
        <include refid="tb"/>
        (<include refid="Base_Column_List"/>)
        values (#{articleId, jdbcType=INTEGER},#{articleUserId, jdbcType=INTEGER}, #{articleTitle, jdbcType=VARCHAR},
        #{articleContent, jdbcType=VARCHAR}
        , #{articleViewCount, jdbcType=INTEGER}, #{articleCommentCount, jdbcType=INTEGER},
        #{articleLikeCount, jdbcType=INTEGER},
        #{articleIsComment, jdbcType=INTEGER},#{articleStatus, jdbcType=INTEGER},#{articleOrder, jdbcType=INTEGER}
        , #{articleUpdateTime, jdbcType=TIMESTAMP}, #{articleCreateTime, jdbcType=TIMESTAMP},
        #{articleSummary, jdbcType=VARCHAR}, #{articleThumbnail,jdbcType=VARCHAR})
    </insert>

    <!--修改文章-->
    <update id="updateArticle" parameterType="com.vtkd.ssm.blog.entity.Article">
        update
        <include refid="tb"/>
        <set>
            <if test="articleUserId != null">article_user_id = #{articleUserId},</if>
            <if test="articleTitle != null">article_title = #{articleTitle},</if>
            <if test="articleContent != null">article_content = #{articleContent},</if>
            <if test="articleViewCount != null">article_view_count = #{articleViewCount},</if>
            <if test="articleCommentCount != null">article_comment_count = #{articleCommentCount},</if>
            <if test="articleLikeCount != null">article_like_count = #{articleLikeCount},</if>
            <if test="articleIsComment != null">article_is_comment = #{articleIsComment},</if>
            <if test="articleStatus != null">article_status = #{articleStatus},</if>
            <if test="articleOrder != null">article_order = #{articleOrder},</if>
            <if test="articleUpdateTime != null">article_update_time = #{articleUpdateTime},</if>
            <if test="articleCreateTime != null">article_create_time = #{articleCreateTime},</if>
            <if test="articleSummary != null">article_summary = #{articleSummary},</if>
            <if test="articleThumbnail != null">article_thumbnail = #{articleThumbnail},</if>
        </set>
        where article_id = #{articleId, jdbcType=INTEGER}
    </update>

    <!-- 分页 查询 文章-->
    <select id="pageArticle" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="tb"/>
        <where>
            <if test="status != null">article_status = #{status}</if>
        </where>
        limit #{pageIndex, jdbcType=INTEGER}, #{pageSize, jdbcType=INTEGER}
    </select>

    <!--删除 link-->
    <delete id="deleteArticle" parameterType="java.lang.Integer">
        delete from
        <include refid="tb"/>
        where article_id = #{articleId, jdbcType=INTEGER}
    </delete>

    <!--id 查询 link-->
    <select id="getArticleById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="tb"/>
        where article_id = #{articleId, jdbcType=INTEGER}
    </select>

    <!--根据 状态 查询 文章列表 -->
    <select id="listArticle" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="tb"/>
        where article_sattus = 1
        ORDER BY article_status DESC, article_order DESC, article_id ASC
    </select>

    <!--根据条件查询文章列表-->
    <select id="findAll" resultMap="BaseResultMap">
        SELECT
        article.*
        FROM
        article
        <where>
            <if test="status != null">
                article.article_status = #{status} AND
            </if>
            <if test="keywords != null">
                article.article_title LIKE concat(concat('%',#{keywords}),'%') AND
            </if>
            <if test="userId != null">
                article.article_user_id = #{userId} AND
            </if>
            <if test="categoryId != null">
                article.article_id IN (
                SELECT article_category_ref.article_id FROM article_category_ref
                WHERE article_category_ref.category_id = #{categoryId}
                ) AND
            </if>
            <if test="tagId != null">
                article.article_id IN (
                SELECT article_tag_ref.article_id FROM article_tag_ref
                WHERE article_tag_ref.tag_id = #{tagId}
                ) AND
            </if>
            1 = 1
        </where>
        ORDER BY `article`.`article_order` DESC, `article`.`article_id` DESC
    </select>

    <!--根据状态统计 文章总数-->
    <select id="countArticle" resultType="Integer">
        SELECT COUNT(*) FROM
        <include refid="tb"/>
        <where>
            <if test="articleStatus != null">article_Status = #{articleStatus}</if>
        </where>
    </select>

    <!--查询最新文章-->
    <select id="listRecentArticle" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="tb"/>
        <where>
            <if test="userId != null">article_user_id = #{userId}</if>
        </where>
        order by `article_update_time` DESC, `article_id` DESC
        limit 0, #{limit, jdbcType=INTEGER}
    </select>

    <!--根据 分类ID集合 查询文章-->
    <select id="listArticleByCategoryIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="tb"/>
        <where>
            article_status = 1 and
            article_id in (
            select article_id from
            article_category_ref acr
            where
            category_id in
            <if test="categoryIds != null">
                <foreach collection="categoryIds" open="(" close=")" separator="," item="id">
                    #{id}
                </foreach>
            </if>
        </where>
        order by `article_like_count` DESC
        limit #{limit, jdbcType=INTEGER}
    </select>

    <!--根据文章id查询分类id集合-->
    <select id="listArticleByArticleId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="tb"/>
        where article_id in (
        select
        category_id
        from article_category_ref
        where article_id = #{articleId, jdbcType=INTEGER}
        )
        order by article_like_count DESC
        limit #{limit, jdbcType=INTEGER}
    </select>

    <!--猜你喜欢的文章(分页查询观看数最多的文章)-->
    <select id="listArticleByViewCount" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="tb"/>
        where article_status = 1
        order by article_view_count DESC
        limit #{limit, jdbcType=INTEGER}
    </select>

    <!--下一篇文章-->
    <select id="getAfterArticle" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="tb"/>
        where article_status = 1 AND
        article_id <![CDATA[ > ]]> #{articleId, jdbcType=INTEGER}
        order by article_id ASC
        limit 1
    </select>

    <!--上一篇文章-->
    <select id="getPreArticle" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="tb"/>
        <where>
            article_status = 1 AND
            article_id
            <![CDATA[ < ]]>
            #{articleId, jdbcType=INTEGER}
        </where>
        order by article_id ASC
        limit 1
    </select>

    <!--获取 随机文章-->
    <select id="listRandomArticle" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        <include refid="tb"/>
        where article_status = 1
        order by
        RAND()
        limit #{limit}
    </select>


    <!--热评的文章(分页查询 评论最多 的文章)-->
    <select id="listArticleByCommentCount" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="tb"/>
        where article_status = 1
        order by article_comment_count DESC
        limit #{limit, jdbcType=INTEGER}
    </select>

    <!--增加 文章的浏览人数 -->
    <update id="articleViewIncrease" parameterType="java.lang.Integer">
        update
        <include refid="tb"/>
        set
        article_view_count = 1+article.article_view_count
        where article_id = #{articleId, jdbcType=INTEGER}
    </update>

    <!--查询 浏览总量-->
    <select id="countArticleView" resultType="java.lang.Integer">
        select
        sum(`article_view_count`)
        from
        <include refid="tb"/>
    </select>

    <!--查询最后一个更新的文章-->
    <select id="getLastUpdateArticle" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="tb"/>
        order by `article_update_time` DESC
        limit 1
    </select>

    <!--增加 文章 的点赞数量 -->
    <update id="articleLikeIncrease" parameterType="java.lang.Integer">
        update
        <include refid="tb"/>
        set
        `article_like_count` = 1+article_like_count
        where article_id = #{articleId, jdbcType=INTEGER}
    </update>

    <!--归档文章-->
    <select id="listAllNotWithContent" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="tb"/>
        where article_status = 1
        ORDER BY article_status ASC, article_create_time DESC, article_id DESC
    </select>


</mapper>